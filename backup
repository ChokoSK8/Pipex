#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <string.h>
#include <sys/stat.h>
#include <fcntl.h>

void	print_newargv(char **newargv)
{
	int	count;

	count = 0;
	while (newargv[count])
	{
		printf("newargv[%d] : %s\n", count, newargv[count]);
		count++;
	}
}

int	**make_pipes(void)
{
	int		count;
	int		**fds;

	count = 2;
	fds = malloc(sizeof(int *) * 2);
	if (!fds)
		return (0);
	while (count--)
	{
		fds[count] = malloc(sizeof(int) * 2);
		if (!fds[count])
			return (0);
		if (pipe(fds[count]) == -1)
			return (0);
	}
	return (fds);
}

void	ft_close_fd(int fd)
{
	if (close(fd) == -1)
	{
		perror("La fonction close a echoue");
		exit(EXIT_FAILURE);
	}
}

void	ft_dup2(int newfd, int oldfd)
{
	if (dup2(newfd, oldfd) == -1)
	{
		perror("La fonction dup2 a echoue");
		exit(EXIT_FAILURE);
	}
}

int	ft_len_param(char **av, int n_av)
{
	int	len;
	int	count;

	count = n_av + 1;
	len = 0;
	while (av[count] && av[count][0] == '-')
	{
		len++;
		count++;
	}
	return (len);
}

void	ft_cmd_1(int **fds, char **newargv)
{
	ft_close_fd(fds[0][0]);
	ft_close_fd(fds[1][0]);
	ft_close_fd(fds[1][1]);
	ft_dup2(fds[0][1], STDOUT_FILENO);
	ft_close_fd(fds[0][1]);
	if (execve(newargv[0], newargv, NULL) == -1)
	{
		perror("La fonction execve 1 a echoue");
		exit(EXIT_FAILURE);
	}
	exit(EXIT_FAILURE);
}

void	ft_cmd_2(int **fds, char **newargv)
{
	ft_close_fd(fds[0][1]);
	ft_close_fd(fds[1][0]);
	ft_dup2(fds[0][0], STDIN_FILENO);
	ft_dup2(fds[1][1], STDOUT_FILENO);
	ft_dup2(fds[1][1], STDERR_FILENO);
	ft_close_fd(fds[0][0]);
	ft_close_fd(fds[1][1]);
	if (execve(newargv[0], newargv, NULL) == -1)
	{
		perror("La fonction execve 2 a echoue");
		exit(EXIT_FAILURE);
	}
	exit(EXIT_FAILURE);
}

void	ft_write_in_file(int **fds, char **av, int ac)
{
	char	buf[100];
	int		ret;
	int		outfd;

	ft_close_fd(fds[0][0]);
	ft_close_fd(fds[0][1]);
	ft_close_fd(fds[1][1]);
	ret = read(fds[1][0], buf, 100);
	ft_close_fd(fds[1][0]);
	buf[ret] = 0;
	outfd = open(av[ac - 1], O_CREAT | O_RDWR | O_TRUNC, S_IRUSR | S_IWUSR);
	if (outfd < 0)
		exit(EXIT_FAILURE);
	write(outfd, buf, ret);
	close(outfd);
}

int	get_n_av(int pt_av, char **av, int ac)
{
	int		n_av;
	int		loop;
	char	*path;

	n_av = -1;
	loop = 1;
	while (loop && n_av + pt_av < ac - 1)
	{
		n_av++;
		path = malloc(strlen("/usr/bin/") + strlen(av[pt_av + n_av]));
		if (!path)
			return (0);
		strcpy(path, "/usr/bin/");
		strcat(path, av[pt_av + n_av]);
		if (!access(path, X_OK))
			loop = 0;
		free(path);
	}
	return (n_av);
}

char	*get_last_param(char **av, int pt_av)
{
	char	*param;

	if (!av[pt_av])
	{
		param = malloc(strlen(av[pt_av - 1]));
		if (!param)
			return (0);
		strcpy(param, av[pt_av - 1]);
	}
	else
		return (0);
	return (param);
}

char	*assign_first(char **av, int pt_av)
{
	char	*first;

	first = malloc(strlen("/usr/bin/") + strlen(av[pt_av]));
	if (!first)
		return (0);
	strcpy(first, "/usr/bin/");
	strcat(first, av[pt_av]);
	return (first);
}

char	**assign_param(char **newargv, char **av, int n_av, int pt_av)
{
	int	count;

	count = 0;
	newargv[count] = assign_first(av, pt_av);
	if (!newargv[count++])
		return (0);
	pt_av++;
	while (n_av--)
	{
		newargv[count] = malloc(sizeof(strlen(av[pt_av])));
		if (!newargv[count])
			return (0);
		strcpy(newargv[count], av[pt_av]);
		count++;
		pt_av++;
	}
	if (pt_av == 2 + count)
	{
		newargv[count] = malloc(strlen(av[1]));
		if (!newargv[count])
			return (0);
		strcpy(newargv[count++], av[1]);
	}
	newargv[count] = 0;
	return (newargv);
}

char	***ft_init_newargvs(char **av, int ac)
{
	char	***newargv;
	int		n_av;
	int		count;
	int		pt_av;

	newargv = malloc(sizeof(char **) * 2);
	if (!newargv)
		return (0);
	count = -1;
	pt_av = 2;
	while (++count < 2)
	{
		n_av = get_n_av(pt_av + 1, av, ac);
		newargv[count] = malloc(sizeof(char *) * (n_av + 3));
		if (!newargv[count])
			return (0);
		newargv[count] = assign_param(newargv[count], av, n_av, pt_av);
		if (!newargv[count])
			return (0);
		if (pt_av == 2)
			pt_av++;
		pt_av += n_av;
	}
	return (newargv);
}

int	main(int ac, char **av)
{
	pid_t	child_pid;
	int		**fds;
	char	***newargv;

	newargv = ft_init_newargvs(av, ac);
	if (!newargv)
		return (0);
	fds = make_pipes();
	child_pid = fork();
	if (child_pid == -1)
		return (0);
	if (child_pid == 0)
		ft_cmd_1(fds, newargv[0]);
	child_pid = fork();
	if (child_pid == -1)
		return (0);
	if (child_pid == 0)
		ft_cmd_2(fds, newargv[1]);
	ft_write_in_file(fds, av, ac);
	return (1);
}
